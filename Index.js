var argTypes = {
    property1: {
      type: Number, // reference to the global function which will help to convert
      default: 1,
    },
    property2: {
      type: String,
      default: "hello",
    },
    property3: {
      type: Boolean,
      default: false,
    },
    property4: {
      type: "object", // too many options how to convert from string to obj
      default: { hello: "world" }
    }
};

function ParseArgsToMap(args)
{
    const   argsStartIndex = 2;
    const   parmsMap = new Map();
    let     key, value;

    for (var i = argsStartIndex; i <= args.length; i++)
    {
        if (i % 2 == 0)
        {
            key = args[i];
            value = null;
        }
        else
        {
            value = args[i];
        }

        if (typeof(key) != "undefined")
        {
            parmsMap.set(key, value);
        }
    }

    return parmsMap;
}

function CreateDefaultObjectFromArgTypes(argTypes)
{
    const defaultObject = {};
    for (let property in argTypes)
    {
        defaultObject[property] = argTypes[property].default;
    }

    return defaultObject;
}

function CreateObjectFromArgsMap(argsMap, argTypes)
{
    const autoGeneratedObject = Object.assign({}, CreateDefaultObjectFromArgTypes(argTypes));

    for (let [property, value] of argsMap.entries())
    {
        if (property in argTypes)
        {
            let propertyType = argTypes[property].type;
            if (propertyType === "object")
            {
                autoGeneratedObject[property] = JSON.parse(value);
            }
            else
            {
                autoGeneratedObject[property] = propertyType(value);
            }
        }
        else
        {
            autoGeneratedObject[property] = value;
        }
    }

    return autoGeneratedObject;
}

const argsMap = ParseArgsToMap(process.argv);
const myObject = CreateObjectFromArgsMap(argsMap, argTypes);

console.log(myObject);